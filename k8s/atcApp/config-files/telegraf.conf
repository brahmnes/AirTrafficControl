# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "5s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 1000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "3s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "1s"

  ## Logging configuration:
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Specify the log file name. The empty string means to log to stdout.
  logfile = ""
  
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""

###############################################################################
#                                  AGGREGATORS                                #
###############################################################################
#[[aggregators.basicstats]]
  ## General Aggregator Arguments:
  ## The period on which to flush & clear the aggregator.
#  period = "20s"
  ## If true, the original metric will be dropped by the
  ## aggregator and will not get sent to the output plugins.
#  drop_original = true
  
#[[aggregators.minmax]]
  ## General Aggregator Arguments:
  ## The period on which to flush & clear the aggregator.
#  period = "30s"
#  drop_original = true

###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[[outputs.application_insights]]
  enableDiagnosticLogging = true
  instrumentationKey = "$APPINSIGHTS_INSTRUMENTATIONKEY"
  [outputs.application_insights.contextTagSources]
    "ai.cloud.role" = "kubernetes_container_name"
    "ai.cloud.roleInstance" = "kubernetes_pod_name"


# [[outputs.file]]
  ## Files to write to, "stdout" is a specially handled file.
  ## This is useful mainly for diagnosing problems
#  files = ["stdout"]
#  data_format = "json"
#  json_timestamp_units = "1ms"

###############################################################################
#                              PROCESSORS                                     #
###############################################################################

# Apply metric modifications using override semantics.
[[processors.override]]
  ## All modifications on inputs and aggregators can be overridden:
  # name_override = "new_name"
  # name_prefix = "new_name_prefix"
  # name_suffix = "new_name_suffix"

  ## Tags to be added (all values must be strings)
  [processors.override.tags]
    kubernetes_container_name = "$SOURCE_CONTAINER_NAME"
    kubernetes_pod_name = "$POD_NAME"

###############################################################################
#                                  INPUTS                                     #
###############################################################################

[[inputs.http_listener]]
  ## Address and port to host HTTP listener on
  service_address = ":8186"

  ## timeouts
  read_timeout = "10s"
  write_timeout = "10s"